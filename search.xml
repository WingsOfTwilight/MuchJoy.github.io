<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP协议之与WEB服务器</title>
      <link href="/2024/06/05/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%B8%8EWEB%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/06/05/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%B8%8EWEB%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p> <strong>用单台虚拟主机实现多个域名</strong> 通过基于名称的虚拟主机配置，可以在同一个IP地址上托管多个域名。</p><h3 id="通信转发程序"><a href="#通信转发程序" class="headerlink" title="通信转发程序"></a>通信转发程序</h3><p><strong>代理</strong> ：”中间人”角色，接收由客户端发送的请求并转发给服务器，同时也接受服务器返回的响应并转发给客户端。代理不会改变请求的URLI，会直接发送给前方持有资源的目标服务器。可做到针对特定URI访问的控制。<strong>缓存代理</strong>预存副本在缓存服务器上，<strong>透明代理</strong>不对报文做任何加工。反之为<strong>非透明代理</strong>。<br><img src="/../images/1717579873084.jpg"></p><p><strong>网关</strong></p><p>利用网关可以有HTTP请求转化为其他协议通信。利用网关能提高通信的安全性。可以在客户端与网关之间通信线路上加密以确保连接的安全性。</p><p><strong>隧道</strong></p><p>隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析HTTP请求。</p><h3 id="资源缓存"><a href="#资源缓存" class="headerlink" title="资源缓存"></a>资源缓存</h3><p><strong>缓存的有效期</strong> 会确认有效性。</p><p><strong>客户端缓存</strong> 临时网络文件。会确认有效性。</p><h3 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h3><p><img src="/../images/1717586328959.jpg"></p><p><strong>HTTP首部字段</strong> ：首部字段名:字段值。<strong>类型</strong>：通用首部字段，请求首部字段，响应首部字段，实体首部字段。首部指令是可选的，多个指令之间用“，”分隔。</p><p><strong>通用首部字段</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control       制缓存的行为</span><br><span class="line">Connection          跳首部、连接的管理</span><br><span class="line">Date                创建报文的日期时间</span><br><span class="line">Transfer-Encoding   指定报文主体的传输编码方式</span><br><span class="line">Upgrade             升级为其他协议</span><br><span class="line">Via                 代理服务器的相关信息</span><br><span class="line">Warning             错误通知</span><br></pre></td></tr></tbody></table></figure><p><strong>请求首部字段</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Accept              用戶代理可处理的媒体类型</span><br><span class="line">Accept-Encoding     优先的内容编码</span><br><span class="line">Accept-Language     优先的语言(自然语言)</span><br><span class="line">Host                请求资源所在服务器</span><br><span class="line">Range               实体的字节范围请求</span><br><span class="line">User-Agent          HTTP客户端程序的信息</span><br><span class="line">Proxy-Authorization 代理服务器要求客户端的认证信息</span><br></pre></td></tr></tbody></table></figure><p><strong>响应首部字段</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges       是否接受宇节范围请求</span><br><span class="line">Age                 推算资源创建经过时间</span><br><span class="line">ETag                资源的匹配信息</span><br><span class="line">Location            令客户端重定向至指定URI</span><br><span class="line">Proxy-Authenticate  代理服务器对客户端的认证信息</span><br><span class="line">Retry-After         对再次发起请求的时机要求</span><br><span class="line">Server              HTTP服务器的安装信息</span><br><span class="line">Vary                代理服务器缓存的管理信息</span><br><span class="line">WWW-Authenticate    服务器对客户端的认证信息</span><br></pre></td></tr></tbody></table></figure><p><strong>实体首部字段</strong> </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Allow               资源可支持的HTTP 方法</span><br><span class="line">Content-Encoding    实体主体适用的编码方式 </span><br><span class="line">Content-Language    实体主体的自然语言 </span><br><span class="line">Content-Length      实体主体的大小 (单位:字节) </span><br><span class="line">Content-Location    替代对应资源的URI </span><br><span class="line">Content-MD5         实体主体的报文摘要</span><br><span class="line">Content-Range       实体主体的位置范围 </span><br><span class="line">Content-Type        实体主体的媒体类型 </span><br><span class="line">Expires             实体主体过期的日期时间</span><br><span class="line">Last-Modified       资源的最后修改日期时间</span><br></pre></td></tr></tbody></table></figure><p><strong>Set-Cookie</strong>: 为Cookie服务的首部字段</p><h3 id="确保Web安全的HTTPS"><a href="#确保Web安全的HTTPS" class="headerlink" title="确保Web安全的HTTPS"></a>确保Web安全的HTTPS</h3><p><strong>HTTP缺点</strong> 通信使用明文(不加密)，内容可能会被窃听；不验证通信方的身份， 因此有可能遭遇伪装；无法证明报文的完整性，所以有可能已遭篡改。</p><p><strong>HTTPS</strong> HTTP协议中没有加密机制，但可以通过和SSL或者TLS的组合使用，加密HTTP的通信内容（<strong>通信加密</strong>）。</p><p><strong>内容加密</strong> HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密。对报文主体加密。前提是要求客户端和服务端同时具备加密和解密机制。能有可能被篡改。</p><p><strong>不验证通信方的身份就可能遭遇伪装</strong> ：任何人都可以发起请求。<br><strong>无法证明报文完整性，可能已被篡改</strong> ：接收到的内容可能有误<br><strong>如何防止篡改</strong> ：常用的方法是MD5 和SHA-1等散列值集校验以及用来确认文件的数字签名方法。因为PGP 和MD5 本身被改写的话，用户是没有办法意识到的。用这些方法也依然无法百分百保证确认结果正确。为了有效防止这些弊端， 有必要使用<strong>HTTPS</strong>。</p><p><strong>HTTP+加密+认证+完整性保护 = HTTPS</strong> ： HTTPS是身披SSL外壳的HTTP，只是HTTP通信接口部分用SSL和TLS协议代替，通常HTTP直接和TCP通信，当使用SSL时则先和SSL通信，再有SSL和TCP通信。<br><img src="/../images/1717636990962.jpg"></p><p>SSL采用公开密钥加密，密钥是保密的。<strong>共享密钥加密</strong> 加密和解密同用一个密钥。也称为对称密钥加密。发送密钥就有被窃听的风险，但不发送，对方就不能解密。再说，密 钥若能够安全发送，那数据也应该能安全送达。<strong>公开密钥加密</strong>很好解决了共享密钥加密的困难。公开密钥加密使用非对称的密钥，一吧叫做私有密钥，一把叫做公开密钥。使用密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再用私有密钥解密。这样既不需要发送私有密钥，也不必担心密钥被攻击盗走。HTTPS采用的<strong>混合加密</strong>：使用公开密钥加密 加密 共享密钥方式中的密钥，确保安全的情况下，使用共享密钥加密方式进行通信。</p><h3 id="Session管理及Cookie应用"><a href="#Session管理及Cookie应用" class="headerlink" title="Session管理及Cookie应用"></a>Session管理及Cookie应用</h3><p>基于表单认证是通过服务器端的Web应用，将客户端发送来的用户Id和密码与之前登陆过的信息做匹配来进行认证。HTTP是无状态协议，于是会使用Coolie来管理Session，来弥补HTTP协议中不存在的状态管理功能。<br><img src="/../images/1717641701756.jpg"><br>1、客户端发送用户ID和密码等登录信息到服务器<br>2、服务器发放用以识别用户的SessionId，返回是会在首部字段Set-Cookie写入SessionId<br>3、客户端收到服务器端发来的Session ID后，将其作为Cookie保存在本地。下次发送请求时，浏览器或自动发送Cookie。</p><p><strong>加盐</strong>：一种安全的保存密码方法，先利用给密码加盐的方式增加额外信息，在使用散列函数计算出散列值后保存。</p><h3 id="HTTP瓶颈"><a href="#HTTP瓶颈" class="headerlink" title="HTTP瓶颈"></a>HTTP瓶颈</h3><p>使用HTTP协议探知服务器上是否有内容更新，就必须频繁的从客户端到服务端进行确认。（1、不管是否有更新都要吧数据全部响应一次。2、每次互相发送相同的首部。3、有时不压缩数据直接发送）。</p><p><strong>Ajax</strong> 有效利用JavaScript和DOM的操作，以达到局部Web页面替换加载的异步通信手段。但是并没有解决HTTP协议本身的问题。</p><h3 id="全双工通信的WebSocket"><a href="#全双工通信的WebSocket" class="headerlink" title="全双工通信的WebSocket"></a>全双工通信的WebSocket</h3><p>WebSocket，即Web浏览器与Web服务器之间全双工通信标准。</p><p>一旦建立WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信过程中可以互次昂发送JSON，XML或图片等任意格式的数据。</p><p><strong>WebSocket协议</strong> 主要特点：<br>推送功能：支持由服务器向客户端推送数据的推送功能。<br>减少通信量：只要建立起WebSocket 连接，就希望一直保持连接状态。位了实现WebScoket通信，在HTTP连接建立之后，需要完成一次握手的步骤。成功握手确立WebScoket连接之后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。<br><img src="/../images/1717665892946.jpg"></p><h3 id="Web攻击技术"><a href="#Web攻击技术" class="headerlink" title="Web攻击技术"></a>Web攻击技术</h3><p>简单的HTTP协议本身并不存在安全性问题，因此协议本身几乎不会成为攻击的对象。应用HTTP协议的服务器和客户端，以及运行在服务器上的web应用等资源才是攻击目标。</p><p><strong>在客户端即可篡改请求</strong></p><p><strong>针对Web应用的攻击模式</strong><br>主动攻击：<br><img src="/../images/1717667317285.jpg"><br>被动攻击：具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。<br><img src="/../images/1717667403282.jpg"></p><p><strong>利用用户的身份攻击企业内部的网络</strong><br>利用被动攻击，可发起对原本从互联网上无法直接访问的企业内网等网络的攻击。</p><p><strong>跨站脚本攻击</strong> 跨站脚本政击(Cross-SiteScripting，XSS)是指通过存在的安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击。XSS是攻击者利用预先设置的陷阱触发的被动攻击。</p><p><strong>SQL注入攻击</strong></p><p><strong>OS命令注入攻击</strong></p><p><strong>HTTP首部注入攻击</strong></p><p><strong>HTTP响应截断攻击</strong></p><p><strong>邮件首部注入攻击</strong></p><p><strong>远程文件包含漏洞</strong></p><p><strong>开放重定向</strong> 是一种对指定的任意URL作重定向<br>跳转的功能。而于此功能相关联的安全漏洞是指，假如指定的重定向URL到某个具有恶意的Web网站，那么用户就会被诱导至那个Web网站。</p><p><strong>会话劫持</strong> 会话劫持(Session Hiack )是指攻击者通过某种手段拿到了用户的<br>会话1D，并非法使用此会话1D 份装成用户，达到攻击的目的。</p><p><strong>会话固定攻击</strong>对以窃取目标会话ID为主动攻击手段的会话劫持而言，会话固定攻击(Sesion Fixation )攻击会强制用户使用攻击者指定的会话ID，属于被动攻击。</p><p><strong>跨站点请求伪造</strong> 可能造成的问题：<br>• 利用己通过认证的用户权限更新设定信息等<br>• 利用己通过认证的用户权限购买商品<br>• 利用己通过认证的用户权限在留言板上发表言论</p><p><strong>点击劫持</strong><br>点击劫持是指利用透明的按钮或链接做成陷阱，覆盖在web页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装。</p><p><strong>DOS攻击</strong> DOS攻击是一种让运行中的服务呈停止状态的攻击。</p><p><strong>后门程序</strong> 后门程序(Backdoor )是指开发设置的隐藏入口，可不按正常步骤使用受限功能。可通过监视进程和通信的状态发现被植人的后门程序。但设定在 web 应用中的后门程序，由于和正常使用时区别不大，通常很难发现。</p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之详情</title>
      <link href="/2024/06/04/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%A6%E6%83%85/"/>
      <url>/2024/06/04/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%A6%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>HTTP报文大致分为报文首部和报文主体两块。[ <strong>报文首部</strong>]服务器端或者客户端需要处理的请求或响应的内容及属性。[ <strong>CR+LF</strong>]空行，[ <strong>报文主体</strong>]应被发送的数据。<br><img src="/../images/%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.jpg"></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="提升传输效率"><a href="#提升传输效率" class="headerlink" title="提升传输效率"></a>提升传输效率</h3><p><strong>压缩传输的内容编码</strong>：如邮件添加附件（压缩附件）。常用的内容编码：gzip，compress(UNIX系统标准压缩)，deflate(zlib),identity(不进行编码)。<br><strong>分割发送的分块传输编码</strong>：chunked(Content-Length:null Transfer-Encoding:chunked) 把实体主体分块的功能。HTTP/1.1中存在一种称为传输编码的机制。HTTP/2 中已经不支持 chunked 这一格式了，因为其本身提供了更加高级的流机制来实现类似功能.</p><h3 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h3><p>HTTP协议中也采纳了多部分对象集合，发送一份报文主体内可以包含多种类型的实体。通常是在图片或者文本文件等上传时使用。<strong>multipart/form-date</strong>在web表单文件上传时使用。<strong>nultipart/byteranges</strong>状态码206，响应报文包含多个范围的内容时使用。</p><h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>解决网络中断，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处回复下载。实现该功能需要指定下载的范围实体(<strong>范围请求</strong>)。使用范围请求时，会用到首部字段Range来指定资源的byte范围。<br><img src="/../images/%E8%8C%83%E5%9B%B4%E8%AF%B7%E6%B1%82.jpg"></p><h3 id="内容协商返回最合适的内容"><a href="#内容协商返回最合适的内容" class="headerlink" title="内容协商返回最合适的内容"></a>内容协商返回最合适的内容</h3><p>内容协商机制是指客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为合适的资源。聂荣协商会以响应资源的语言，字符集，编码方式等作为判断基准。<strong>服务器驱动协商</strong>，<strong>客户端驱动协商</strong>，<strong>透明协商</strong></p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1XX -&gt; 信息性状态码 -&gt; 接收的请求正在处理</span><br><span class="line">2XX -&gt; 成功状态码 -&gt; 请求正常处理完毕</span><br><span class="line">    200 OK</span><br><span class="line">    204 No Content</span><br><span class="line">    206 Partial Content 范围请求你</span><br><span class="line">3XX -&gt; 重定向状态码 -&gt; 需要进行附加操作以完成请求</span><br><span class="line">    301 Moved Permanently 永久性重定向</span><br><span class="line">    302 Found 临时性重定向</span><br><span class="line">    303 See Other 该状态码表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源</span><br><span class="line">    304 </span><br><span class="line">    307</span><br><span class="line">4XX -&gt; 客户端错误状态码 -&gt; 服务器无法处理请求</span><br><span class="line">    400 Bad Request 表示请求报文存在语法错误</span><br><span class="line">    401 Unauthorized 发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息</span><br><span class="line">    403 Forbidden 对请求资源的访问被服务器拒绝了</span><br><span class="line">    404 Not Found 服务器没有请求的资源</span><br><span class="line">5XX -&gt; 服务器错误状态码 -&gt; 服务器处理请求出错</span><br><span class="line">    500 服务器端在执行请求发生了错误</span><br><span class="line">    503 服务器暂时处于超负载或者正在停机维护 </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之基础</title>
      <link href="/2024/06/03/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/06/03/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>HTTP 是一种用作获取诸如 HTML 文档这类资源的协议。它是 Web 上进行任何数据交换的基础，同时，也是一种客户端—服务器（client-server）协议，也就是说，请求是由接受方——通常是浏览器——发起的。一个完整网页文档是由获取到的不同文档组件——像是文本、布局描述、图片、视频、脚本等——重新构建出来的。<br><img src="/../images/HTTP%E6%A6%82%E8%BF%B0.jpg" alt="HTTP协议之基础"></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="1、网络基础"><a href="#1、网络基础" class="headerlink" title="1、网络基础"></a>1、网络基础</h3><p>&nbsp;&nbsp;TCP/IP协议族是各类互联网相关的各类协议族的总称。TCP/IP协议族最重要的就是分层：应用层，传输层，网络层，数据链路层。</p><p><strong>应用层</strong>：应用层决定了向用户提供应用服务时通信的活动。TCP/IP协议族内预存了各类通用的应用服务。比如HTTP协议,FTP(文件传输协议)，DNS(域名服务)。</p><p><strong>传输层</strong>：传输层对上层应用，提供处于网络连接中的两台计算机的网络传输。在传输层有两个性质不同的协议：TCP(传输控制协议)，UDP(用户数据报协议)。</p><p><strong>网络层</strong>：网络层是用来处理网络上流动的数据包。数据包是网络传输的最小数据单位，该层规定了通过怎样的路径，到达对应的计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或者网络设备进行传输时，网络层所起的作用就是在众多的选项中选择一条传输路线。</p><p><strong>链路层（网络接口层）</strong>：用来处理网络的硬件部分。包括控制操作系统，硬件的设备驱动，NIC(网络适配器：网卡)及光线等物理可见部分，硬件的范畴均在链路层的作用范围之内。</p><p><img src="/../images/%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93%E6%B5%81.jpg" alt="TCP/IP通信传输流"></p><p><strong>负责传输的IP协议</strong>：IP地址指明了节点被分配的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对，IP地址可更换，但MAC地址基本上不会改变。IP间的通信依赖MAC地址，在网络上，通常是经过多台计算机和网络设备中转才能连接到对方，在中转过程中会利用下一站的MAC地址来搜索下一个中转目标。会采用<strong>ARP协议</strong>，ARP协议是一种用来解析地址的协议。根据通信方的IP地址就可以查出对应的MAC地址。</p><p><strong>可靠的TCP协议</strong>：TCP位于传输层，提供可靠的字节流服务。字节流服务是指，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠的传给对方。为了准确无误将数据送达目标，TCP协议采用了三次握手策略。<br><img src="/../images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%AE%80.jpg" alt="三次握手（简）"></p><p><strong>域名解析DNS服务</strong>：和HTTP协议一样位于应用层的协议。它提供域名到IP地址之间的解析服务。<br><img src="/../images/%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="与HTTP关系图"></p><h3 id="2、简单的HTTP协议"><a href="#2、简单的HTTP协议" class="headerlink" title="2、简单的HTTP协议"></a>2、简单的HTTP协议</h3><p>HTTP协议和TCP/IP协议族内的其他众多的协议相同，用于客户端和服务器之间的通信。HTTP是一种不保存协议，即<strong>无状态协议</strong>。HTTP协议自身不对请求和响应之间的通信状态进行保存。HTTP/1.1虽然也是无状态协议，但是为了实现期望的保存状态功能，引入了Cookie技术。</p><p>HTTP/1.1方法 –&gt;<br>&nbsp;&nbsp;&nbsp; <strong>GET</strong>:获取资源<br>&nbsp;&nbsp;&nbsp; <strong>POST</strong> 传输实体主体<br>&nbsp;&nbsp;&nbsp; <strong>PUT</strong>：传输文件<br>&nbsp;&nbsp;&nbsp; <strong>HEAD</strong>：获得报文首部（不返回报文主体部分）<br>&nbsp;&nbsp;&nbsp; <strong>DELETE</strong>：删除文件<br>&nbsp;&nbsp;&nbsp; <strong>OPTIONS</strong>：询问支持的方法（如支持GET和HEAD方法）<img src="/../images/OPTIONS%E6%96%B9%E6%B3%95.jpg"><br>&nbsp;&nbsp;&nbsp; <strong>TRACE</strong>：追踪路径（不常用，容易引发SXST攻击）<br>&nbsp;&nbsp;&nbsp; <strong>CONNECT</strong>：要求用隧道协议连接代理，要求在代理服务器通信时建立隧道，实现隧道协议惊醒TCP通信。主要使用SSL(安全套阶层)和TLS(传输层安全)协议把通信内容加密后经过网络隧道传输。格式：CONNECT 代理服务器名:端口号 HTTP版本 。场景：HTTPS代理，防火墙和安全网关，VPN服务等</p><p>在HTTP/1.1中，所有的连接默认都是持久连接（长连接），在HTTP/1.0还没有标准化。持久化连接是的多数请求翼<strong>管线化</strong>(pipelining)方式发送层成为可能。从前发送请求后需要等待并收到响应，才能发送下一个请求。管线化技术出现后，不能等待响应可以直接发送下次请求。</p><p><strong>Cookie状态管理</strong>：Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部信息，通知客户端保存Cookie。当客户端再次发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。<br><img src="/../images/Cookie%E4%BA%A4%E4%BA%92.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识mysql</title>
      <link href="/2024/06/01/mysql%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
      <url>/2024/06/01/mysql%E8%AF%A6%E8%A7%A3(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>服务器程序在处理来自客户端的查询请求时，大致需要分为3部分：连接管理，解析与优化，存储引擎。<br><img src="/../images/1717725217845.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
